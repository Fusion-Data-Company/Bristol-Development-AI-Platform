Build this as my initial prototype

Copy-paste this component to /components/ui folder:
```tsx
sign-in.tsx
import * as React from "react"
import { cn } from "@/lib/utils" // Your utility for merging class names
import { Button, type ButtonProps } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Eye, EyeOff, KeyRound, Mail, Sparkles } from "lucide-react"
import {useTheme} from "next-themes"

// Simple SVG components for brand icons as placeholders
const GoogleIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <img src= "https://svgl.app/library/google.svg" { ...props }/>
)

const MicrosoftIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <img src= "https://svgl.app/library/microsoft.svg" { ...props }/>
)

const AppleIcon = (props: React.SVGProps<SVGSVGElement>) => {
  const {theme} = useTheme();
  return <>
  <img src= {`https://svgl.app/library/apple${theme==='dark' ? '_dark': ''}.svg`} { ...props }/>

  </>
}

interface AuthFormProps extends React.HTMLAttributes<HTMLDivElement> {
  onEmailSubmit?: (data: { email: string; password?: string }) => void
  onSocialSignIn?: (provider: 'google' | 'microsoft' | 'apple' | 'sso') => void
  onEmailLink?: () => void
}

const AuthForm = React.forwardRef<HTMLDivElement, AuthFormProps>(
  ({ className, onEmailSubmit, onSocialSignIn, onEmailLink, ...props }, ref) => {
    const [showPassword, setShowPassword] = React.useState(false)

    const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {
      event.preventDefault()
      const formData = new FormData(event.currentTarget)
      const email = formData.get("email") as string
      const password = formData.get("password") as string
      onEmailSubmit?.({ email, password })
    }

    return (
      <Card ref= { ref } className = { cn("w-full max-w-md mx-auto", className) } {...props}>
        <CardHeader className="text-left" >
          <CardTitle className="text-2xl" > Sign in with email < /CardTitle>
          <CardDescription>
            Make a new doc to bring your words, data, and teams together.For free.
          < /CardDescription>
  < /CardHeader>
  < CardContent >
  <div className="space-y-4" >
    {/* Social Sign-in */ }
    < div className = "space-y-2" >
      <Label className="text-xs text-muted-foreground" > Sign in with</Label>
      < div className = "grid grid-cols-4 gap-2" >
        <Button variant="outline" onClick = {() => onSocialSignIn?.('google')}>
          <GoogleIcon className="size-4 fill-primary" />
            </Button>
            < Button variant = "outline" onClick = {() => onSocialSignIn?.('microsoft')}>
              <MicrosoftIcon className="size-4 fill-primary" />
                </Button>
                < Button variant = "outline" onClick = {() => onSocialSignIn?.('apple')}>
                  <AppleIcon className="size-5" />
                    </Button>
                    < Button variant = "outline" onClick = {() => onSocialSignIn?.('sso')}>
                      <KeyRound className="h-5 w-5" />
                        <span className="ml-1.5" > SSO < /span>
                          < /Button>
                          < /div>
                          < /div>

{/* Divider */ }
<div className="relative" >
  <div className="absolute inset-0 flex items-center" >
    <span className="w-full border-t" />
      </div>
      < div className = "relative flex justify-center text-xs uppercase" >
        <span className="bg-background px-2 text-muted-foreground" > or < /span>
          < /div>
          < /div>

{/* Email Form */ }
<form onSubmit={ handleFormSubmit } className = "space-y-4" >
  <div className="space-y-2" >
    <Label htmlFor="email" > Email < /Label>
      < div className = "relative" >
        <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input id="email" name = "email" type = "email" placeholder = "jdoe.mobbin@gmail.com" className = "pl-9" required />
            </div>
            < /div>
            < div className = "space-y-2" >
              <div className="flex items-center justify-between" >
                <Label htmlFor="password" > Password < /Label>
                  < a href = "#" className = "text-sm font-medium text-primary hover:underline" > Forgot password ? </a>
                    < /div>
                    < div className = "relative" >
                      <KeyRound className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input id="password" name = "password" type = { showPassword? "text": "password" } className = "pl-9 pr-10" required />
                          <Button 
                        type="button"
variant = "ghost"
size = "icon"
className = "absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7 text-muted-foreground"
onClick = {() => setShowPassword(!showPassword)}
                    >
  { showPassword?<EyeOff className = "h-4 w-4" /> : <Eye className="h-4 w-4" />}
</Button>
  < /div>
  < /div>
  < Button type = "submit" className = "w-full" > Sign In < /Button>
    < /form>
    < /div>
    < /CardContent>
    < CardFooter className = "flex-col items-start space-y-4" >
      <Button variant="ghost" className = "w-full text-muted-foreground" onClick = {() => onEmailLink?.()}>
        <Sparkles className="mr-2 h-4 w-4" />
          Or email me a link
            < /Button>
            < p className = "text-xs text-muted-foreground text-center w-full" >
              By logging in, you agree to our{ ' ' }
<a href="#" className = "underline hover:text-primary" >
  Terms of Service
    < /a>{' '}
    & { ' '}
    < a href = "#" className = "underline hover:text-primary" >
      Privacy Policy
        < /a>
        < /p>
        < /CardFooter>
        < /Card>
    )
  }
)
AuthForm.displayName = "AuthForm"

export { AuthForm }

demo.tsx
import { AuthForm } from "@/components/ui/sign-in"

// A simple SVG for the puzzle graphic to demonstrate layout
const PuzzleGraphic = () => (
    <svg width="250" height="150" viewBox="0 0 250 150" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g transform="translate(50, 20) rotate(15 75 75)">
            <path d="M75 0 C50 0, 50 25, 25 25 S0 50, 0 75 S25 125, 50 125 S75 100, 75 100 L100 100 C100 100, 125 75, 125 75 S150 50, 150 50 S125 25, 100 25 L75 25 L75 0Z" fill="hsl(var(--card))" stroke="hsl(var(--foreground))" strokeWidth="2"/>
        </g>
        <g transform="translate(70, 40) rotate(-10 75 75)">
            <path d="M75 150 C100 150, 100 125, 125 125 S150 100, 150 75 S125 25, 100 25 S75 50, 75 50 L50 50 C50 50, 25 75, 25 75 S0 100, 0 100 S25 125, 50 125 L75 125 L75 150Z" fill="#F97316" stroke="#1E293B" strokeWidth="2"/>
        </g>
    </svg>
)

export default function AuthFormDemo() {
  const handleSocialSignIn = (provider: string) => {
    console.log(`Signing in with ${provider}...`)
  }

  const handleEmailSubmit = (data: { email: string; password?: string }) => {
    console.log("Form submitted:", data)
  }
  
  const handleEmailLink = () => {
    console.log("Requesting email link...")
  }

  return (
    <div className="w-full min-h-screen flex items-center justify-center bg-[#FBF8F3] dark:bg-muted/20">
        <AuthForm 
          onSocialSignIn={handleSocialSignIn}
          onEmailSubmit={handleEmailSubmit}
          onEmailLink={handleEmailLink}
          className="shadow-xl"
        />
    </div>
  )
}
```

Copy-paste these files for dependencies:
```tsx
originui/button
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-sm shadow-black/5 hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm shadow-black/5 hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm shadow-black/5 hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm shadow-black/5 hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-lg px-3 text-xs",
        lg: "h-10 rounded-lg px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

```
```tsx
shadcn/card
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className,
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```
```tsx
originui/input
import { cn } from "@/lib/utils";
import * as React from "react";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-lg border border-input bg-background px-3 py-2 text-sm text-foreground shadow-sm shadow-black/5 transition-shadow placeholder:text-muted-foreground/70 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] focus-visible:ring-ring/20 disabled:cursor-not-allowed disabled:opacity-50",
          type === "search" &&
            "[&::-webkit-search-cancel-button]:appearance-none [&::-webkit-search-decoration]:appearance-none [&::-webkit-search-results-button]:appearance-none [&::-webkit-search-results-decoration]:appearance-none",
          type === "file" &&
            "p-0 pr-3 italic text-muted-foreground/70 file:me-3 file:h-full file:border-0 file:border-r file:border-solid file:border-input file:bg-transparent file:px-3 file:text-sm file:font-medium file:not-italic file:text-foreground",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

```
```tsx
shadcn/label
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

Install these NPM dependencies:
```bash
next-themes, lucide-react, @radix-ui/react-slot, class-variance-authority, @radix-ui/react-label
```
