You are the Builder. Perform a SAFE ROLLBACK to the last stable Bristol AI scaffold and bring the app back up.

1) SAFETY BACKUP (no data loss)
- If a git repo exists, run:
  - git rev-parse --is-inside-work-tree || git init
  - git add -A
  - git commit -m "WIP backup before rollback"
  - git branch panic-backup-$(date +%Y%m%d-%H%M%S)
- If no git history, initialize git and commit everything now:
  - git init
  - git add -A && git commit -m "Initial backup snapshot"

2) FIND LAST STABLE COMMIT
- Show the log: git --no-pager log --oneline -n 20
- Identify the most recent commit that contains the stable Bristol scaffold (keywords to prefer in the message in this order):
  a) "REPLIT BUILDER MASTER PROMPT — Bristol Site Intelligence (Production Scaffold)"
  b) "BRAND + MEMORY SUPERPROMPT — Bristol"
  c) "MCP + WS + TOOLS CONSOLE"
- If one exists, reset to it:
  - git reset --hard <that_commit_sha>
- If none exists (brand new repo), SKIP reset and proceed to step 3 to RECONSTRUCT the scaffold in place.

3) ENSURE THE STABLE SCAFFOLD EXISTS (REPAIR IF MISSING)
Create/ensure the following exact structure and files. Do NOT add marketing pages. Do NOT create placeholders that break build.

ROOT
- package.json with workspaces ["apps/web","apps/api"]

apps/api (Node/Express, ESM "type":"module")
- package.json deps (exact or supersets): express, cors, cookie-parser, pg, axios, playwright, msal-node, @microsoft/microsoft-graph-client, zod, ws, uuid, apify-client, dayjs
- .env.example containing: DATABASE_URL, ALLOWED_ORIGIN, OPENROUTER_API_KEY, N8N_WEBHOOK_URL, MS_CLIENT_ID, MS_CLIENT_SECRET, MS_TENANT_ID=common, MS_REDIRECT_URI, MCP_API_KEY, MCP_WEBHOOK_SECRET
- public/bristol-logo.gif (create placeholder file; do not 404)
- src/db.js with tables: users, oauth_tokens, sites, properties, metrics, concessions, comps, runs, files, memory_short, memory_long (JSON), tools
- src/index.js using http.createServer(app) + attachWs(server); cors(ALLOWED_ORIGIN), express.json limit 15mb, cookieParser; serve /public
- routes: 
  /api/public.js (Sites + Metrics CRUD + sample ACS/HUD endpoints)
  /api/comps.js (create/list/rescore with 1–100 scoring: amenities 40%, rent 30%, concessions 20%, distance 10%)
  /api/agent.js (OpenRouter chat; write-metric; MCP→n8n trigger)
  /api/scrape.js (Playwright simple scraper → comps)
  /api/microsoft.js (Graph OAuth login + list drive + list mail)
  /api/tools.js (API Tools registry)
  /api/pipeline.js (ArcGIS FeatureServer query proxy)
  /api/ingest.js + ingest/bristolIngest.js (crawl bristoldevelopment.com to memory_long)
  /api/mcp.js (list tools, run tool, universal webhook, ping)
- mcp/core.js (tool registry + EventEmitter bus; built-ins: n8n.trigger, http.fetch, db.query safe, metrics.write)
- mcp/ws.js (WebSocketServer { noServer:true } + server.on("upgrade") for /api/mcp/ws)

apps/web (React+Vite+Tailwind)
- package.json deps: react, react-dom, axios, @tanstack/react-table, maplibre-gl, @arcgis/core, jszip, @tmcw/togeojson, zustand
- tailwind.config.js (Cinzel + Bristol palette)
- index.html (loads Cinzel; favicon /public/bristol-logo.gif)
- src/main.jsx (routes "/", "/integrations", "/tools")
- pages/App.jsx (tabs: Map, 3D Sandbox, Tables; header with logo + links)
- pages/Integrations.jsx (Microsoft connect buttons + Tools registry form/list)
- pages/ToolsConsole.jsx (list MCP tools, JSON payload box, Run Tool, and live WebSocket events)
- widgets/Map.jsx (MapLibre default + ArcGIS toggle; KML/KMZ upload using togeojson; fitBounds; NOTE: include a simple local KML/KMZ path that does NOT depend on external auth)
- widgets/EarthTab.jsx (Cesium via CDN; lazy load)
- widgets/ChatDock.jsx (Head-of-Data system prompt; model dropdown; uses /api/agent/chat)
- widgets/forms/AddSiteForm.jsx; tables/{SitesTable,MetricsTable,CompsTable}.jsx
- brand/Chrome.jsx; widgets/HeroStrip.jsx
- lib/mcpClient.js where:
  - const API_BASE = VITE_API_BASE || (location.origin.replace(":5173",":3000") if dev)
  - mcpRun posts to `${API_BASE}/api/mcp/run`
  - mcpConnect opens WS to `${wsProto}//${apiHost}/api/mcp/ws`

IMPORTANT:
- EXCLUDE the advanced PARLAY resolver for this rollback. Keep only the simple KML/KMZ local upload path so the app boots cleanly independent of external auth.
- Keep the MCP server and Tools Console working.

4) INSTALL & RUN
- npm install at repo root
- If apps/api/.env doesn’t exist, copy from .env.example
- Set at least:
  - DATABASE_URL=<Replit Postgres URL>
  - ALLOWED_ORIGIN=http://localhost:5173
- npm run dev
- Verify:
  - GET http://localhost:3000/api/health → { ok:true } OR ensure index.js has such route
  - Open http://localhost:5173 → Map (local KML/KMZ works), Tables (CRUD), Chat dock (note if OpenRouter key missing), Tools Console lists tools and WS connects

5) OUTPUT
- Print: "Rollback complete. App running. MCP WS OK, Tools Console OK, local KML/KMZ OK. External PARLAY disabled pending credentials."
- If anything fails, print the exact file path and line number, then fix it and continue until dev servers are running.