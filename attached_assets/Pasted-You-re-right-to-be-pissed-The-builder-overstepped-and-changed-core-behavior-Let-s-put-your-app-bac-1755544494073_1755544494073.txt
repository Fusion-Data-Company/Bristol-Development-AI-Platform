You’re right to be pissed. The builder overstepped and changed core behavior. Let’s put your app back exactly the way it was—ElevenLabs agent + SUPER MCP intact—and get you a truthful report of everything it touched.

Below is a do-now recovery plan that (1) safely restores only what matters, (2) prints an honest, verifiable change report, and (3) fixes the unreadable nav. It won’t guess; it uses git history and file-level restores so we don’t nuke other good fixes.

⸻

0) STOP THE BLEEDING (no more “helpful” edits)

# Freeze the deployment that’s currently live so nothing else rolls out
# (In Replit Deployments UI: disable automatic redeploy on commit)

# Local safety: prevent any cleanup scripts from running
export SAFE_MODE=1


⸻

1) FASTEST SAFE ROLLBACK OF JUST THE BROKEN PARTS

We will restore only ElevenLabs + MCP + nav files from the last known good commit (“LKG”), leaving the rest of the stability work in place.

A) Find the LKG commit that still had your ElevenLabs agent & SUPER MCP

# Find commits touching ElevenLabs / MCP code paths or envs
git log -n 50 --date=iso --pretty='format:%h  %ad  %s' \
  -G 'ELEVENLABS|elevenlabs|textToSpeech|voice|MCP|model-context-protocol|startMcpServer|super mcp|super_mcp'

Pick the commit hash <GOOD> just before the breakage.

B) Restore ONLY the critical files from <GOOD>

Adjust paths to match your repo. If you’re unsure, restore the whole directories then trim later.

# ElevenLabs server/API routes & agent glue
git checkout <GOOD> -- server/api/elevenlabs.ts
git checkout <GOOD> -- server/api/elevenlabs-webhook.ts
git checkout <GOOD> -- server/api/mcp-elevenlabs.ts
git checkout <GOOD> -- src/agents/elevenlabs/            # if you had an agent folder
git checkout <GOOD> -- src/services/elevenlabs/          # tts client/utilities if existed

# SUPER MCP registry/server + tool wiring
git checkout <GOOD> -- src/mcp/
git checkout <GOOD> -- src/tools/
git checkout <GOOD> -- src/lib/mcp*                      # any mcp helpers you used
git checkout <GOOD> -- server/mcp/                       # if servers lived here

# Realtime wiring that your agent relied on (if it was changed)
git checkout <GOOD> -- src/realtime/
git checkout <GOOD> -- server/ws/                        # if applicable

# Navigation (unreadable menu)
git checkout <GOOD> -- src/components/Nav*
git checkout <GOOD> -- src/components/MobileNav*
git checkout <GOOD> -- src/styles/**                     # only if nav styles lived here

This returns those files exactly to your pre-hardening state—no guessing, no rewrites.

C) Keep the stability work you liked

Do not revert commits wholesale. We’re cherry-restoring files so your memory fixes, singleton guards, etc., remain.

⸻

2) HONEST, VERIFIABLE REPORT OF WHAT CHANGED

Prints exactly which files were added/removed/modified and highlights ElevenLabs/MCP diffs.

# 48h truth report
git log --since="48 hours ago" --date=iso --name-status --pretty='format:%h  %ad  %an  %s' > docs/changes-48h.txt

# Compare LKG to HEAD, file-by-file
git diff --name-status <GOOD>..HEAD > docs/diff-LKG-to-HEAD.txt

# Show full diffs for just ElevenLabs & MCP surfaces
git diff <GOOD>..HEAD -- \
  "server/api/*elevenlabs*.ts" \
  "src/**/elevenlabs/**" \
  "src/**/mcp/**" \
  "server/**/mcp/**" > docs/diff-elevenlabs-mcp.txt

# List anything deleted in that period
git log --since="48 hours ago" --name-status --diff-filter=D --pretty='format:--- %h %ad %s' > docs/deletions-48h.txt

Open the docs/*.txt files—this is the honest printout you asked for. No spin.

⸻

3) QUICK NAV FIX (readability right now)

If the menu went low-contrast or behind overlays, apply a non-invasive stylesheet override (doesn’t touch your structure):

/* src/styles/nav-hotfix.css — TEMPORARY */
.nav, .MobileNav, .mobile-nav, [data-mobile-nav="true"] {
  color: #0b0b0b !important;
  background: #ffffffF2 !important;
  backdrop-filter: saturate(100%) blur(4px);
  -webkit-backdrop-filter: saturate(100%) blur(4px);
  z-index: 9999 !important;
  box-shadow: 0 8px 30px rgba(0,0,0,.12);
}
.nav a, .MobileNav a { color: #0b0b0b !important; }
.nav [role="dialog"], .MobileNav [role="dialog"] { background: #ffffff !important; }

Then import it last in your global styles so it wins:

// src/main.tsx or src/app.css entry
import './styles/nav-hotfix.css';


⸻

4) ENSURE RUNTIME WIRING IS BACK (without guessing)

After restoring files, verify the exact endpoints & MCP tools are wired as before.

# Local health probes (read-only GETs; no external API calls)
curl -sS http://127.0.0.1:${PORT:-3000}/healthz

# These should exist again if you used these paths/names:
curl -sS "http://127.0.0.1:${PORT:-3000}/api/elevenlabs?dryRun=1" | head
curl -sS "http://127.0.0.1:${PORT:-3000}/api/elevenlabs-webhook?dryRun=1" | head
curl -sS "http://127.0.0.1:${PORT:-3000}/api/mcp-elevenlabs?dryRun=1" | head

# List MCP tools server-side (adjust to your listing endpoint if you had one)
# If not, grep for tool registrations:
grep -RIn --exclude-dir=node_modules "registerTool|addTool|tools\\[" src/mcp src/tools || true

If these endpoints are different in your app, hit whatever you actually had—your restored files define the truth.

⸻

5) REPLIT DEPLOYMENT: ROLLBACK JUST THE CODE, KEEP THE MACHINES
	1.	Commit the file restores:

git add -A
git commit -m "Restore ElevenLabs + SUPER MCP + Nav from LKG <GOOD> (surgical, no other changes)"
git push

	2.	In Deployments, redeploy this commit (Autoscale stays maxed as you configured).
	3.	Watch logs for:

	•	ElevenLabs route handlers registering
	•	MCP server startup logs for your “elite-*” servers
	•	WebSocket auth accepted + limited (no flood)

⸻

6) IF ELEVENLABS STILL DOESN’T TALK (env & webhook sanity)
	•	Confirm env vars weren’t renamed by the builder:
	•	ELEVENLABS_API_KEY, any ELEVENLABS_VOICE_ID, etc.
	•	Verify your webhook URL is the same path you restored and still allowed through any rate limiter/security middleware.
	•	If a “global guard” was added (e.g., mutex), ensure webhook routes are excluded from rate limiters and auth guards.

Typical Express exclusions:

// BEFORE: limiter applied globally
// AFTER: apply limiter except for webhooks
app.use((req,res,next)=>{
  if (req.path.startsWith('/api/elevenlabs-webhook')) return next();
  return limiter(req,res,next);
});


⸻

7) LOCK THIS IN SO IT CAN’T BE “CLEANED UP” AGAIN

Add a tiny guard that fails builds if these files disappear ever again (no runtime cost):

cat > .protectedpaths <<'EOF'
server/api/elevenlabs.ts
server/api/elevenlabs-webhook.ts
server/api/mcp-elevenlabs.ts
src/mcp/
src/tools/
EOF

cat > scripts/verify-critical.js <<'EOF'
const fs=require('fs');let bad=false;
for (const p of fs.readFileSync('.protectedpaths','utf8').split('\n').map(s=>s.trim()).filter(Boolean)){
  if(!fs.existsSync(p)){ console.error('[CRITICAL MISSING]', p); bad=true; }
}
process.exit(bad?2:0);
EOF

# Add to package.json scripts and your deployment build step
# "verify:critical": "node scripts/verify-critical.js"


⸻

What you’ll get after the above:
	•	ElevenLabs agent back exactly as it was (files restored from LKG).
	•	SUPER MCP registry/server back with your original tools and wiring.
	•	Nav readable again (CSS hotfix) while keeping all your new stability wins.
	•	Honest reports (docs/*.txt) you can open to see precisely what was changed.
	•	Guardrails so no one can delete these again without the build failing.

If something still misfires after the targeted restore, paste the first 30–50 lines of:
	•	docs/diff-elevenlabs-mcp.txt
	•	the server startup logs around ElevenLabs/MCP registration
	•	any 4xx/5xx from the three /api/elevenlabs* routes

…and I’ll map that directly to the exact file+line to fix—without removing a single feature or user choice.