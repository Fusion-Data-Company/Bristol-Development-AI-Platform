Here’s a single, copy-paste “mega prompt” you can drop into your Replit AI/Code Assistant. It’s written so the builder will finish your app to an enterprise, production-ready level without breaking MCP, webhooks, or APIs, while also delivering a clean mobile experience (with the pop-out agent hidden on mobile and a proper mobile nav).

⸻

REPLIT BUILDER PROMPT — PRODUCTION HARDENING FOR BRISTOL DEVELOPMENT APP

You are an elite Replit developer hired to take an already “functionally perfect” app to production quality without breaking anything. Follow this SOP precisely.

0) OBJECTIVE & NON-NEGOTIABLES
	•	Goal: Production-grade build with full desktop + mobile support. On mobile: hide the pop-out agent entirely and use only the Chat page. Add a clean mobile navigation.
	•	Do NOT break or alter behavior of:
	•	MCP configuration and clients
	•	Webhook endpoints and payload contracts
	•	External API integrations (keep env usage identical)
	•	No placeholders allowed: any remaining placeholder UI or functions must be either implemented or removed. Sample data demonstrating features is allowed and can remain behind a DEMO_MODE flag.
	•	No regressions. If uncertain, ask internally (in comments) and choose the safest no-break path.

⸻

1) PROTECTED AREAS — DO NOT MODIFY (except bugfixes)
	•	Any /mcp/** directory, MCP transport/client files, or MCP server config.
	•	All files handling webhook routes, verification, and signatures (common paths: /api/webhooks/**, /server/webhooks/**, /routes/webhooks/**).
	•	Do not rename, move, or change exported function names or route patterns.
	•	Do not change request/response shapes or verification secrets.
	•	API client wrappers, SDK initializers, or services/* used by webhooks or MCP.
	•	Environment variable names. Keep .env key names exactly the same. Reads must not change shape.

Add a // PROTECTED: do not modify without owner approval comment at the top of each such file.

⸻

2) PRE-FLIGHT AUDIT (READ-ONLY, NO CHANGES YET)
	1.	Generate a dependency and route graph:
	•	For JS/TS: run a static import scan over src/** to map used files.
	•	List all routes/endpoints and note which components/pages import them.
	2.	Find potential placeholders:
	•	Grep for: TODO|FIXME|PLACEHOLDER|lorem ipsum|mock|stub|example only|WIP|TBD|temp.
	•	Grep for dead utilities: functions with no references.
	3.	Asset inventory:
	•	List /public/** and /assets/** files with byte sizes and first reference location.
	4.	MCP & webhook integrity:
	•	Locate MCP connect/init points and all webhook routes. Record the exact filenames and exported symbols.
	5.	Mobile readiness:
	•	Enumerate all pages and note which contain fixed widths, overflow issues, or elements that will not fit on small screens.
	6.	Build settings:
	•	Confirm production build command in .replit or replit.nix and Node version.
	•	Confirm NODE_ENV=production set for builds and server runtime.
	7.	Security & compliance quick pass:
	•	Check CSP headers, CORS config, cookie settings, error handling redactions, and logging levels.

Output a brief report (/docs/preflight-report.md) before you modify anything.

⸻

3) MOBILE IMPLEMENTATION RULES
	•	Hide pop-out agent on mobile (viewport width < 1024px). Keep it fully functional on desktop/tablet.
	•	CSS guard (add once if not present):

/* src/styles/responsive.css */
@media (max-width: 1024px) {
  .PopoutAgentContainer { display: none !important; }
}


	•	Runtime guard (React example—adjust to framework):

// Example: src/components/PopoutAgent.tsx
import { useEffect, useState } from 'react';
export default function PopoutAgent(props) {
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const check = () => setIsMobile(window.innerWidth <= 1024);
    check(); window.addEventListener('resize', check);
    return () => window.removeEventListener('resize', check);
  }, []);
  if (isMobile) return null; // hard block on mobile
  return <div className="PopoutAgentContainer">{/* existing agent */}</div>;
}


	•	Mobile navigation: implement a hamburger that slides a menu drawer; keyboard accessible; trap focus when open; body scroll lock.
	•	React example (adjust paths and styling as needed):

// src/components/MobileNav.tsx
import { useState, useEffect, useRef } from 'react';

export default function MobileNav() {
  const [open, setOpen] = useState(false);
  const panelRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    document.body.style.overflow = open ? 'hidden' : '';
    return () => { document.body.style.overflow = ''; };
  }, [open]);

  useEffect(() => {
    function handleKey(e: KeyboardEvent) { if (e.key === 'Escape') setOpen(false); }
    window.addEventListener('keydown', handleKey);
    return () => window.removeEventListener('keydown', handleKey);
  }, []);

  return (
    <div className="md:hidden">
      <button aria-label="Open navigation menu" onClick={() => setOpen(true)}>
        ☰
      </button>

      {open && (
        <div
          role="dialog"
          aria-modal="true"
          className="fixed inset-0 z-50"
          onClick={() => setOpen(false)}
        >
          <div className="fixed inset-0 bg-black/40" />
          <div
            className="absolute left-0 top-0 h-full w-80 max-w-[80%] bg-white dark:bg-neutral-900 shadow-xl focus:outline-none"
            ref={panelRef}
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-4 flex items-center justify-between">
              <span className="font-semibold">Menu</span>
              <button aria-label="Close" onClick={() => setOpen(false)}>✕</button>
            </div>
            <nav className="px-4 pb-6">
              <a className="block py-3" href="/">Home</a>
              <a className="block py-3" href="/chat">Chat</a>
              <a className="block py-3" href="/properties">Properties</a>
              <a className="block py-3" href="/reports">Reports</a>
              {/* add more as needed */}
            </nav>
          </div>
        </div>
      )}
    </div>
  );
}


	•	Mount <MobileNav /> alongside the desktop nav: show desktop nav on md+, mobile on <md.

	•	Ensure chat page is fully usable on mobile (no horizontal scroll, textareas auto-grow, buttons large enough, sticky footer input ok).

⸻

4) PLACEHOLDER PURGE (STRICT)
	•	For each match in the pre-flight placeholder scan:
	•	If it’s a UI placeholder for a real feature → implement the real behavior now using existing services.
	•	If it’s a function placeholder → implement the function or delete the function and all references.
	•	If it’s demo/sample data that is explicitly there to demonstrate a feature → keep, but gate with:

const DEMO_MODE = process.env.DEMO_MODE === 'true';

Only render demo blocks when DEMO_MODE is true.

	•	After changes, rerun the scan. The app must build with zero TODO/PLACEHOLDER/WIP references (except explicit comments inside /docs/**).

⸻

5) SAFE CLEANUP — DELETE DEV TRASH WITHOUT BREAKING THE APP

Rules:
	•	Use the dependency graph: a file is removable only if it is not imported anywhere and not dynamically resolved.
	•	For assets in /public or /assets: remove only if no template string or runtime build step references them. Search for their base names across the repo.
	•	Remove libraries only if unused after a full text search for their imports.

Steps:
	1.	Remove unused components, hooks, utils, styles, images, videos, fonts, and test fixtures.
	2.	Remove dev tooling not needed in prod (e.g., eruda, local debug overlays, mock servers).
	3.	Remove commented-out code blocks and dead feature flags.
	4.	Keep SampleData modules (if they are actively used for demo) but guard behind DEMO_MODE.

Produce /docs/cleanup-report.md listing deleted items.

⸻

6) PERFORMANCE HARDENING
	•	Ensure production bundling (e.g., Vite/Next/Parcel) does:
	•	Tree-shaking and minification
	•	Code splitting for heavy pages and the chat agent bundle
	•	Dynamic import for rarely used admin screens
	•	Images:
	•	Convert heavy PNG/JPG to WebP/AVIF where supported; add srcset for responsive images.
	•	Lazy-load below-the-fold images (loading="lazy").
	•	Fonts: use display=swap, subset where possible, self-host if license permits.
	•	Runtime:
	•	Replace console.log with a leveled logger that is silent in production:

// src/lib/logger.ts
export const log = {
  debug: (..._) => { if (process.env.NODE_ENV !== 'production') console.debug(..._); },
  info: (..._) => console.info(..._),
  warn: (..._) => console.warn(..._),
  error: (..._) => console.error(..._),
};


	•	Caching:
	•	Add immutable cache headers for hashed assets.
	•	Add service worker only if already present; do not introduce offline caching unless trivial and safe.
	•	Async boundaries:
	•	Wrap major network calls with timeouts and user-visible states (spinner + retry).

⸻

7) ACCESSIBILITY (A11Y) BASELINE
	•	Color contrast AA minimum, focus states on all interactive elements, proper labels on inputs.
	•	All modals: focus trap + Escape to close + backdrop click to close (except destructive dialogs).
	•	ARIA roles for nav, main, banner, complementary.
	•	Keyboard navigation must reach the chat input and send button easily on mobile.

⸻

8) SECURITY & COMPLIANCE
	•	No secrets in repo; rely on Replit Secrets. Do not rename env keys. Confirm references exist via process.env.* or equivalent adapter.
	•	Add a Content Security Policy header (tighten if already present) that still permits existing integrations:
	•	Example (adjust to current integrations):

default-src 'self';
script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.openrouter.ai https://*.replit.dev;
connect-src 'self' https://*;
img-src 'self' data: blob:;
style-src 'self' 'unsafe-inline';
frame-ancestors 'none';


	•	CORS: keep existing rules. Do not widen origins. If tightening, ensure MCP/webhooks keep working.
	•	Error responses: never leak stack traces or env values to clients; show generic user messages.
	•	Rate limiting: if a limiter exists, keep settings; if missing and trivial to add without breaking behavior, add a lightweight per-IP limiter only to public endpoints (exclude webhooks if they come from trusted providers with allowlist).

⸻

9) SEO & APP METADATA (SAFE)
	•	Add/update: favicon, apple-touch-icon, manifest.json, robots.txt, sitemap.xml (if routing is static).
	•	Proper <title>, meta description, OpenGraph, and Twitter tags for main pages.
	•	Do not expose private routes in sitemap.

⸻

10) ERROR BOUNDARIES & FALLBACKS
	•	In React apps: add a top-level ErrorBoundary to catch render errors and show a friendly message with a “Retry” that reloads the component.
	•	For the Chat page: error state should keep the input usable and allow resending.

⸻

11) BUILD/DEPLOY RELIABILITY
	•	Verify .replit and replit.nix:
	•	Correct Node version (LTS).
	•	Single npm run build and npm run start (or vite build/next build equivalents).
	•	Ensure NODE_ENV=production and any required PUBLIC_ env vars are set at runtime.
	•	Create npm scripts:

{
  "scripts": {
    "preflight": "node scripts/preflight.js",
    "analyze": "vite build --analyze || next build && next build-analyze || true",
    "build": "NODE_ENV=production vite build || NODE_ENV=production next build",
    "start": "node server.js || next start -p 3000",
    "lint": "eslint .",
    "typecheck": "tsc --noEmit",
    "a11y": "axe-linter ./dist || true"
  }
}



⸻

12) TEST PASSES THAT MUST SUCCEED (SMOKE)
	•	MCP handshake: run the app, confirm MCP connects (no 4xx/5xx in console/network).
	•	Webhook dry run: send a test payload to each webhook route (use existing fixtures). Expect identical status codes and response shapes.
	•	API key presence: if any required env is missing, build should fail with a clear message (preflight check).
	•	Mobile: emulate viewport 375×812 and 414×896. Verify:
	•	Pop-out agent is not present.
	•	Chat page fully usable, no horizontal scroll.
	•	Mobile nav opens/closes, traps focus, scroll lock works.

Document results in /docs/smoke-results.md.

⸻

13) FINAL POLISH & HOUSEKEEPING
	•	Remove leftover comments and debug code. Keep concise JSDoc on public utilities.
	•	Normalize file names (kebab-case for routes, PascalCase for components).
	•	Ensure imports are absolute via tsconfig.paths or Vite alias (@/*).
	•	Ensure consistent formatting: run Prettier + ESLint fixes.
	•	Create /docs/operational-notes.md explaining:
	•	How to toggle DEMO_MODE
	•	How to add nav links
	•	How to re-enable the pop-out agent for tablet if desired
	•	Which files are protected and why

⸻

14) DELIVERABLES
	1.	/docs/preflight-report.md — issues found, placeholder list, asset inventory.
	2.	/docs/cleanup-report.md — what was removed and why.
	3.	/docs/smoke-results.md — screenshots or notes confirming passes (MCP, webhooks, mobile).
	4.	/docs/operational-notes.md — runbook.
	5.	Working code with:
	•	Pop-out agent hidden on mobile.
	•	Mobile navigation implemented.
	•	Zero placeholders left (except gated demo content).
	•	Build works with NODE_ENV=production, no regressions.

Important: If any step risks MCP/webhook/API breakage, do not change it. Note the risk in /docs/preflight-report.md and proceed with a safer alternative.

Begin now.

⸻

Tip: Paste this whole prompt into Replit’s AI, then let it run the pre-flight and proceed step-by-step. If you want, I can also tailor the mobile nav to your specific stack (React/Next/Vite, plain HTML, etc.) in a follow-up.