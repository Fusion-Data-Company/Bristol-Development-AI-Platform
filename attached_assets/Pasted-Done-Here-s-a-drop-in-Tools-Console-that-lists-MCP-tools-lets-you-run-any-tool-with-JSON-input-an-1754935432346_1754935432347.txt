Done. Here’s a drop‑in Tools Console that lists MCP tools, lets you run any tool with JSON input, and streams live job/events from the MCP WebSocket. Paste these files/edits into your repo from the previous build.

⸻

1) Add page: apps/web/src/pages/ToolsConsole.jsx

import React, { useEffect, useMemo, useRef, useState } from "react";
import axios from "axios";
import { mcpRun, mcpConnect } from "../lib/mcpClient";

function useWsFeed(){
  const [events, setEvents] = useState([]);
  const ref = useRef(null);
  useEffect(()=>{
    const ws = mcpConnect((msg)=>{
      setEvents(prev => [...prev.slice(-199), msg]); // keep last 200
    });
    return ()=> ws && ws.close();
  },[]);
  useEffect(()=>{
    if(ref.current) ref.current.scrollTop = ref.current.scrollHeight;
  },[events]);
  return { events, ref };
}

export default function ToolsConsole(){
  const [tools, setTools] = useState([]);
  const [selected, setSelected] = useState("");
  const [payload, setPayload] = useState("{\n  \n}");
  const [running, setRunning] = useState(false);
  const [result, setResult] = useState(null);
  const { events, ref } = useWsFeed();

  useEffect(()=>{ axios.get("/api/mcp/tools").then(r=>setTools(r.data.tools||[])) },[]);

  async function runTool(){
    setRunning(true); setResult(null);
    let obj = {};
    try { obj = payload.trim() ? JSON.parse(payload) : {}; }
    catch(e){ alert("Payload must be valid JSON.\n\n"+e.message); setRunning(false); return; }
    try {
      const out = await mcpRun(selected, obj);
      setResult(out);
    } catch (e) {
      setResult({ ok:false, error: e.message });
    } finally {
      setRunning(false);
    }
  }

  return (
    <div className="p-4 max-w-[1600px] mx-auto">
      <div className="bg-company-ink text-white px-4 py-3 rounded-xl2 mb-4 flex items-center justify-between">
        <div className="font-serif text-2xl">MCP Tools Console</div>
        <div className="text-sm opacity-90">Run any registered tool · Stream status live</div>
      </div>

      <div className="grid grid-cols-12 gap-4">
        {/* Tools list */}
        <div className="col-span-3 bg-white rounded-xl2 shadow p-3">
          <div className="font-serif text-xl mb-2">Available Tools</div>
          <ul className="space-y-2">
            {tools.map(t=>(
              <li key={t.name}>
                <button
                  className={`w-full text-left border rounded p-2 hover:bg-company-sky ${selected===t.name?'bg-company-sky':''}`}
                  onClick={()=>setSelected(t.name)}
                  title={t.desc || ""}
                >
                  <div className="font-semibold">{t.name}</div>
                  {t.desc && <div className="text-xs text-gray-500">{t.desc}</div>}
                </button>
              </li>
            ))}
          </ul>
        </div>

        {/* Payload + Run */}
        <div className="col-span-5 bg-white rounded-xl2 shadow p-3">
          <div className="flex items-center justify-between mb-2">
            <div className="font-serif text-xl">Payload</div>
            <div className="text-sm text-gray-600">{selected || "Pick a tool"}</div>
          </div>
          <textarea
            className="w-full h-[320px] border rounded p-2 font-mono text-sm"
            value={payload}
            onChange={(e)=>setPayload(e.target.value)}
            placeholder="{ }"
          />
          <div className="mt-2 flex items-center gap-2">
            <button
              onClick={runTool}
              disabled={!selected || running}
              className={`px-4 py-2 rounded ${running?'bg-gray-400':'bg-company-ink text-white'}`}
            >
              {running ? "Running…" : "Run Tool"}
            </button>
            <button
              onClick={()=>setPayload("{\n  \n}")}
              className="px-3 py-2 rounded border"
            >
              Clear
            </button>
          </div>
        </div>

        {/* Result + Events */}
        <div className="col-span-4">
          <div className="bg-white rounded-xl2 shadow p-3 mb-4">
            <div className="font-serif text-xl mb-2">Result</div>
            <pre className="text-xs bg-company-sky/50 rounded p-2 overflow-auto max-h-[180px]">
{result ? JSON.stringify(result, null, 2) : "// run a tool to see output"}
            </pre>
          </div>

          <div className="bg-white rounded-xl2 shadow p-3">
            <div className="font-serif text-xl mb-2">Live Events</div>
            <div ref={ref} className="text-xs bg-company-sky/50 rounded p-2 overflow-auto h-[200px]">
              {events.length===0 ? "// waiting for events…" : events.map((e,i)=>(
                <div key={i} className="mb-1">
                  <code>{JSON.stringify(e)}</code>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Helper presets */}
      <div className="mt-6 bg-white rounded-xl2 shadow p-3">
        <div className="font-serif text-xl mb-2">Quick Presets</div>
        <div className="flex flex-wrap gap-2">
          <Preset label="n8n.trigger / pull-acs" onPick={()=>{
            setSelected("n8n.trigger");
            setPayload(JSON.stringify({ task:"pull-acs", site_id:"<SITE_ID>" }, null, 2));
          }}/>
          <Preset label="http.fetch / httpbin" onPick={()=>{
            setSelected("http.fetch");
            setPayload(JSON.stringify({ url:"https://httpbin.org/get" }, null, 2));
          }}/>
          <Preset label="metrics.write" onPick={()=>{
            setSelected("metrics.write");
            setPayload(JSON.stringify({
              site_id:"<SITE_ID>", metric_key:"acs.median_income", value:78000, unit:"USD", source:"Census ACS"
            }, null, 2));
          }}/>
          <Preset label="apify.scrape (single url)" onPick={()=>{
            setSelected("apify.scrape");
            setPayload(JSON.stringify({
              site_id:"<SITE_ID>", url:"https://example-property.com/floorplans"
            }, null, 2));
          }}/>
        </div>
      </div>
    </div>
  );
}

function Preset({ label, onPick }){
  return <button onClick={onPick} className="px-3 py-1 rounded border hover:bg-company-sky">{label}</button>;
}


⸻

2) Add client util (if not already): apps/web/src/lib/mcpClient.js

import axios from "axios";
const KEY = import.meta.env.VITE_MCP_KEY || ""; // optional

export async function mcpRun(name, payload){
  const { data } = await axios.post("/api/mcp/run", { name, payload }, {
    headers: KEY ? { "x-mcp-key": KEY } : {}
  });
  return data;
}
export function mcpConnect(onMessage){
  const wsUrl = (location.origin.replace("http","ws")) + "/api/mcp/ws";
  const ws = new WebSocket(wsUrl);
  ws.onmessage = (msg)=> onMessage?.(JSON.parse(msg.data));
  return ws;
}


⸻

3) Wire up routing and nav

Update apps/web/src/main.jsx to include the route:

import ToolsConsole from "./pages/ToolsConsole.jsx";
// ...
<Route path="/tools" element={<ToolsConsole />} />

Update your header (in App.jsx or shared Header) to add a link:

<div className="ml-auto flex items-center gap-4">
  <a href="/integrations" className="underline">Integrations & Tools</a>
  <a href="/tools" className="underline">Tools Console</a>
</div>


⸻

4) Server already ready

You already have:
        •       /api/mcp/tools and /api/mcp/run (REST),
        •       /api/mcp/webhook (HMAC optional),
        •       /api/mcp/ws (WebSocket events),
        •       Registered tools: n8n.trigger, http.fetch, db.query, metrics.write, apify.scrape.

Nothing else to add on the API side—this console just uses those endpoints.

⸻

5) Optional env (frontend)

If you want the console to require an API key:
        •       In API: set MCP_API_KEY=some_long_random.
        •       In web: set VITE_MCP_KEY=the_same_key (Replit Secrets).
        •       The console will attach x-mcp-key automatically.

⸻

That’s it. After you paste these, run the app and open /tools. You’ll see your tool list, a JSON payload editor, a Run button, the result panel, and live streaming job/events from the MCP server.