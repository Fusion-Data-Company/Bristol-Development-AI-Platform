Got you. Paste this into Replit’s builder exactly as-is. It will (1) explain what it changed to your map, (2) print the current state, and (3) reinstall a working Map (MapLibre + ArcGIS toggle + KML/KMZ upload) without breaking anything else.

⸻

REPLIT AGENT RECOVERY PROMPT — Restore Map Feature + Status Report

Do not delete working code. First diagnose and report, then fix. Keep the rest of the app unchanged.

0) DIAGNOSTICS — TELL ME WHAT YOU DID
	1.	Show last 20 git commits:
	•	git rev-parse --is-inside-work-tree || git init
	•	git log --oneline -n 20 || true
	2.	Print the current file tree (top 3 levels):
	•	ls -la
	•	tree -L 3 || true
	3.	Search for the map components and styles:
	•	grep -Rni "Map.jsx\|Map.tsx\|InteractiveMap\|MapLibre\|maplibre\|KMLLayer\|ArcGIS" apps/web || true
	4.	Print these files if they exist (first 160 lines):
	•	sed -n '1,160p' apps/web/src/widgets/Map.jsx || true
	•	sed -n '1,160p' apps/web/src/pages/App.jsx || true
	•	sed -n '1,160p' apps/web/src/main.jsx || true
	•	sed -n '1,160p' apps/web/index.html || true
	•	sed -n '1,200p' apps/web/src/index.css || true
	5.	Confirm deps are installed:
	•	cat apps/web/package.json
	•	Expect maplibre-gl, @arcgis/core, axios, jszip, @tmcw/togeojson.
	6.	Print Vite startup errors if any:
	•	npm run dev 2>&1 | tail -n 80

Then print a short STATUS block summarizing:
	•	Which map file(s) exist (or missing)
	•	Whether maplibre-gl.css is being imported
	•	Whether Map route/tab is mounted in App.jsx
	•	Missing dependencies
	•	Any build/runtime errors relevant to the map

1) FIXES — RESTORE A KNOWN‑GOOD MAP STACK

If anything above is missing or broken, create or repair the following. Keep names/paths exact.

1.1 Ensure web deps

Update apps/web/package.json to include (don’t remove others):

{
  "dependencies": {
    "axios": "^1.7.2",
    "maplibre-gl": "^3.6.1",
    "@arcgis/core": "^4.29.6",
    "jszip": "^3.10.1",
    "@tmcw/togeojson": "^5.8.0",
    "@tanstack/react-table": "^8.13.0",
    "zustand": "^4.5.2"
  }
}

Run npm install.

1.2 Ensure Map CSS is loaded

In exactly one place, add MapLibre CSS. Prefer apps/web/src/index.css:

@import "maplibre-gl/dist/maplibre-gl.css";

(If you put it in index.html instead, use:

<link rel="stylesheet" href="/node_modules/maplibre-gl/dist/maplibre-gl.css">
```)

### 1.3 Recreate Map widget if missing: `apps/web/src/widgets/Map.jsx`
Create this **minimal, working** component with:
- MapLibre init
- ArcGIS toggle (lazy load layer via @arcgis/core JSAPI imagery tile URL)
- KML/KMZ upload → togeojson → add GeoJSON source + fitBounds
- Safe guards so it never crashes if files are missing

```jsx
import React, { useEffect, useRef, useState } from "react";
import maplibregl from "maplibre-gl";
import axios from "axios";
import JSZip from "jszip";
import * as togeojson from "@tmcw/togeojson";

export default function Map() {
  const mapRef = useRef(null);
  const map = useRef(null);
  const [arcgisOn, setArcgisOn] = useState(false);

  useEffect(() => {
    if (map.current) return;
    map.current = new maplibregl.Map({
      container: mapRef.current,
      style: "https://demotiles.maplibre.org/style.json",
      center: [-86.7816, 36.1627], // Nashville
      zoom: 11
    });
    map.current.addControl(new maplibregl.NavigationControl(), "top-right");
    return () => map.current && map.current.remove();
  }, []);

  async function onFile(e) {
    const file = e.target.files?.[0];
    if (!file || !map.current) return;
    try {
      let kmlText = "";
      if (file.name.toLowerCase().endsWith(".kmz")) {
        const zip = await JSZip.loadAsync(await file.arrayBuffer());
        const entry = Object.values(zip.files).find(f => f.name.toLowerCase().endsWith(".kml"));
        if (!entry) { alert("No KML inside KMZ."); return; }
        kmlText = await entry.async("text");
      } else {
        kmlText = await file.text();
      }
      const xml = new DOMParser().parseFromString(kmlText, "application/xml");
      const gj = togeojson.kml(xml);
      if (!gj?.features?.length) { alert("No features in KML."); return; }
      const id = "kml-" + Math.random().toString(36).slice(2, 8);
      map.current.addSource(id, { type: "geojson", data: gj });
      map.current.addLayer({ id: id + "-fill", type: "fill", source: id, paint: { "fill-opacity": 0.25, "fill-color": "#00BCD4" }});
      map.current.addLayer({ id: id + "-line", type: "line", source: id, paint: { "line-color": "#008BA3", "line-width": 1 }});
      fit(gj);
    } catch (err) {
      console.error("KML/KMZ parse error:", err);
      alert("Failed to load KML/KMZ.");
    } finally {
      e.target.value = "";
    }
  }

  function fit(gj) {
    if (!gj?.features?.length) return;
    const b = boundsOf(gj);
    if (b) map.current.fitBounds(b, { padding: 40 });
  }

  function boundsOf(gj) {
    let minX=+Infinity,minY=+Infinity,maxX=-Infinity,maxY=-Infinity;
    function scan(c) {
      if (Array.isArray(c[0])) c.forEach(scan);
      else {
        const [x,y]=c; if (x<minX) minX=x; if (y<minY) minY=y;
        if (x>maxX) maxX=x; if (y>maxY) maxY=y;
      }
    }
    gj.features.forEach(f=>{
      const g=f.geometry;
      if (!g) return;
      if (g.type==="Point") scan([g.coordinates]);
      else if (g.type==="GeometryCollection") g.geometries.forEach(gg=>scan(gg.coordinates));
      else scan(g.coordinates);
    });
    if (!isFinite(minX)) return null;
    return [[minX,minY],[maxX,maxY]];
  }

  async function toggleArcGIS() {
    setArcgisOn(v => !v);
    // For now, just change style to ESRI light gray tiles via raster source
    const srcId = "esri-basemap";
    const lyrId = "esri-basemap";
    if (!map.current) return;
    if (!arcgisOn) {
      // Add simple raster basemap (public tile service)
      // You can replace with specific ArcGIS FeatureServer later
      const url = "https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}";
      if (!map.current.getSource(srcId)) {
        map.current.addSource(srcId, { type: "raster", tiles: [url], tileSize: 256 });
        map.current.addLayer({ id: lyrId, type: "raster", source: srcId }, map.current.getStyle().layers[0]?.id);
      }
    } else {
      if (map.current.getLayer(lyrId)) map.current.removeLayer(lyrId);
      if (map.current.getSource(srcId)) map.current.removeSource(srcId);
    }
  }

  return (
    <div className="w-full h-[70vh] border rounded-xl overflow-hidden">
      <div className="p-2 flex items-center gap-2 bg-white border-b">
        <input type="file" accept=".kml,.kmz" onChange={onFile} />
        <button className="px-3 py-1 border rounded" onClick={toggleArcGIS}>
          {arcgisOn ? "Hide ArcGIS" : "Show ArcGIS Base"}
        </button>
      </div>
      <div ref={mapRef} className="w-full h-[calc(70vh-44px)]" />
    </div>
  );
}

1.4 Mount the Map in the UI

Ensure apps/web/src/pages/App.jsx has a Map tab that imports widgets/Map.jsx:

import React, { useState } from "react";
import Map from "../widgets/Map.jsx";

export default function AppPage(){
  const [tab, setTab] = useState("map");
  return (
    <div className="p-4">
      <div className="mb-3 flex gap-2">
        <button onClick={()=>setTab("map")} className={`px-3 py-1 border rounded ${tab==="map"?"bg-gray-100":""}`}>Map</button>
        <button onClick={()=>setTab("tables")} className={`px-3 py-1 border rounded ${tab==="tables"?"bg-gray-100":""}`}>Tables</button>
        <button onClick={()=>setTab("sandbox")} className={`px-3 py-1 border rounded ${tab==="sandbox"?"bg-gray-100":""}`}>3D Sandbox</button>
      </div>
      {tab==="map" && <Map/>}
      {tab==="tables" && <div>// tables here</div>}
      {tab==="sandbox" && <div>// 3D here</div>}
    </div>
  );
}

And apps/web/src/main.jsx should route to this page:

import React from "react";
import ReactDOM from "react-dom/client";
import { createBrowserRouter, RouterProvider } from "react-router-dom";
import AppPage from "./pages/App.jsx";
import "./index.css";

const router = createBrowserRouter([{ path: "/", element: <AppPage/> }]);
ReactDOM.createRoot(document.getElementById("root")).render(<RouterProvider router={router} />);

1.5 Vite/HMR sanity

If Vite console shows DOMException about WS, it’s unrelated to the map; ignore after refresh. Make sure no other code tries to open ws://…:5173/api/mcp/ws; your MCP WS should target the API port.

2) RUN & VERIFY
	•	npm install
	•	npm run dev
	•	Open http://localhost:5173
	•	Map renders, pan/zoom works.
	•	Click Show ArcGIS Base → basemap appears.
	•	Upload a small local .kml or .kmz → polygons draw and map fits bounds.

3) FINAL STATUS REPORT (PRINT)

When done, print a concise summary:
	•	Map file path and size
	•	Whether maplibre-gl.css is loaded (where)
	•	Confirmed deps in apps/web/package.json
	•	Any changes made to App.jsx and main.jsx
	•	Any remaining TODOs

If anything fails, print the exact error (file + line), fix it, and re-run until the map loads.

⸻

This will force the agent to (1) tell us what it changed, (2) show the current state, and (3) restore a working map with ArcGIS and KML/KMZ support.