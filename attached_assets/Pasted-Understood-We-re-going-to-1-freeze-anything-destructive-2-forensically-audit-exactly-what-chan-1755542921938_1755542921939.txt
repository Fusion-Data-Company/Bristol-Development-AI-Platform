Understood. We’re going to (1) freeze anything destructive, (2) forensically audit exactly what changed, and (3) give you clean, targeted restores—especially for ElevenLabs and MCP—without breaking everything else again.

Below is a single, copy-paste Replit Builder “forensic audit & restore” mega-prompt. It forces the builder to print a complete report of what it did, lists every deleted/renamed/modified file, and pinpoints anything it removed/touched related to ElevenLabs and MCP. It does not delete or “clean up” anything—only reads, reports, and prepares safe restores. It also enables a SAFE_MODE guard so the assistant can’t delete more stuff.

⸻

REPLIT BUILDER PROMPT — FORENSIC AUDIT & TARGETED RESTORE (SAFE_MODE)

You are in incident response mode. The last optimization pass removed/broke active features (ElevenLabs agent & MCP).
Your job now is read-only forensic analysis + surgical restores—no broad refactors or cleanups.

0) NON-NEGOTIABLES
	•	Do NOT delete, rename, or move any files.
	•	Do NOT refactor or “optimize.”
	•	Do NOT modify env var names, webhook routes, MCP configs, or authorization.
	•	Operate in SAFE_MODE (no destructive changes).
	•	All outputs go to /docs/ and console.
	•	If a restore is required, produce a git command (or file-scoped restore command) and ask for explicit confirmation in a comment at the top of the PR/note (no auto-apply).

Add the following guard to the repo root (create if missing):

# scripts/safe_mode.sh
#!/usr/bin/env bash
set -euo pipefail
echo "SAFE_MODE=1" > .safe_mode

And in any internal scripts that might run, check .safe_mode and exit if set. (Don’t wire this to runtime server—only dev/build scripts.)

⸻

1) GIT-BASED CHANGE AUDIT (FULL PRINT-OUT)

Create a Node script that prints a comprehensive change report for the last 200 commits and the last 48 hours:

// scripts/forensics/change-audit.ts
import { execSync } from 'node:child_process';
import { writeFileSync, mkdirSync } from 'node:fs';

function sh(cmd: string) { return execSync(cmd, { stdio: 'pipe' }).toString(); }

const now = new Date().toISOString().replace(/[:.]/g,'-');
mkdirSync('docs', { recursive: true });

const last48 = sh(`git log --since="48 hours ago" --pretty=format:"%h %ad %an %s" --date=iso`);
const head = sh(`git rev-parse HEAD`).trim();

const diffStat = sh(`git diff --stat HEAD~1 HEAD || true`);
const nameStatus = sh(`git diff --name-status HEAD~1 HEAD || true`);
const deletions = nameStatus.split('\n').filter(l => l.startsWith('D\t')).join('\n');

const fullDiffStatRange = sh(`git log --pretty=format:"%h %ad %an %s" --date=iso --stat -n 20`);
const reflog = sh(`git reflog --date=iso | head -n 50`);

const report = [
  `# Change Audit Report`,
  `Generated: ${new Date().toISOString()}`,
  ``,
  `## HEAD`,
  `Commit: ${head}`,
  ``,
  `## Last 48h Commits`,
  last48 || '(none)',
  ``,
  `## Diff (HEAD~1 -> HEAD) — Stat`,
  diffStat || '(no diff)',
  ``,
  `## Diff (HEAD~1 -> HEAD) — Name Status`,
  nameStatus || '(no diff)',
  ``,
  `## Deleted Files in Last Commit`,
  deletions || '(none)',
  ``,
  `## Recent Changes (last 20 commits) with Stats`,
  fullDiffStatRange || '(no data)',
  ``,
  `## Reflog (last 50)`,
  reflog || '(no data)'
].join('\n');

writeFileSync(`docs/change-audit-${now}.md`, report);
console.log(report);

Run:

node scripts/forensics/change-audit.ts

This must print and write a full report including deleted files.

⸻

2) ELEVENLABS & MCP IMPACT REPORT

Make a scanner that inventories all references to ElevenLabs, MCP, and related configs. It must list missing files (deleted/renamed), broken imports, and routes that point to removed handlers.

// scripts/forensics/integrations-audit.ts
import { execSync } from 'child_process';
import { writeFileSync, mkdirSync } from 'fs';

function sh(cmd: string) { try { return execSync(cmd, { stdio: 'pipe' }).toString(); } catch { return ''; } }
const now = new Date().toISOString().replace(/[:.]/g,'-');
mkdirSync('docs', { recursive: true });

const patterns = [
  'elevenlabs', 'textToSpeech', 'voice', 'TTS', 'ELEVEN', 'ELEVENLABS_API_KEY',
  'mcp', 'model-context-protocol', 'tools', 'startMcpServer', 'MCP_SERVER',
  'openrouter', 'anthropic', 'openai', 'webhook', 'ws', 'WebSocket'
];

const grepResults = patterns.map(p => {
  const out = sh(`grep -RIn --line-number --exclude-dir=node_modules "${p}" || true`);
  return `### Pattern: ${p}\n${out || '(no matches)'}\n`;
}).join('\n');

const tsCheck = sh(`npm run -s typecheck || true`);
const buildCheck = sh(`npm run -s build || true`);

const routesGuess = sh(`grep -RIn "router\\.|app\\.(get|post|put|delete)|createRouter|new Router" src || true`);
const exportsGuess = sh(`grep -RIn "export (function|const|default|class)" src || true`);

const report = [
  '# Integrations Audit',
  `Generated: ${new Date().toISOString()}`,
  '',
  '## Grep Matches (ElevenLabs/MCP/AI/Webhooks/WS)',
  grepResults,
  '## Typecheck Output',
  '```',
  tsCheck.trim(),
  '```',
  '## Build Output (non-destructive)',
  '```',
  buildCheck.trim(),
  '```',
  '## Route Definitions (heuristic scan)',
  '```',
  routesGuess.trim() || '(none)',
  '```',
  '## Exported Symbols (heuristic scan)',
  '```',
  exportsGuess.trim() || '(none)',
  '```'
].join('\n');

writeFileSync(`docs/integrations-audit-${now}.md`, report);
console.log(report);

Run:

node scripts/forensics/integrations-audit.ts

This must show every place ElevenLabs & MCP are (or were) referenced and help identify what vanished.

⸻

3) MISSING-FILE & BROKEN-IMPORT DETECTOR

Create a quick import graph to locate unresolved imports (likely where MCP/ElevenLabs was cut).

// scripts/forensics/broken-imports.ts
import { execSync } from 'child_process';
import { writeFileSync, mkdirSync } from 'fs';

function sh(cmd: string) { try { return execSync(cmd, { stdio: 'pipe' }).toString(); } catch(e:any){ return e.stdout?.toString() || e.message; } }
const now = new Date().toISOString().replace(/[:.]/g,'-');
mkdirSync('docs', { recursive: true });

// Use TypeScript to surface unresolved modules without emitting JS
const out = sh(`npx tsc --noEmit`);
writeFileSync(`docs/broken-imports-${now}.log`, out);
console.log(out);

Run:

node scripts/forensics/broken-imports.ts


⸻

4) ENV & ROUTE CONTRACT AUDIT

List all env vars referenced in code (to see if ELEVENLABS_* or MCP_* vars got orphaned).

// scripts/forensics/env-audit.ts
import { execSync } from 'child_process';
import { writeFileSync, mkdirSync } from 'fs';

function sh(cmd: string) { try { return execSync(cmd, { stdio: 'pipe' }).toString(); } catch { return ''; } }
const now = new Date().toISOString().replace(/[:.]/g,'-');
mkdirSync('docs', { recursive: true });

const envHits = sh(`grep -RIn --exclude-dir=node_modules "process\\.env\\." src || true`);
const report = [
  '# Env Usage Audit',
  `Generated: ${new Date().toISOString()}`,
  '',
  '## process.env.* references',
  '```',
  envHits || '(none)',
  '```'
].join('\n');
writeFileSync(`docs/env-audit-${now}.md`, report);
console.log(report);

Run:

node scripts/forensics/env-audit.ts


⸻

5) MCP TOOL REGISTRY INVENTORY

Print a before/after style inventory of MCP tools and server entry points (whatever exists now).

// scripts/forensics/mcp-inventory.ts
import { readdirSync, statSync, writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';
const now = new Date().toISOString().replace(/[:.]/g,'-');
mkdirSync('docs', { recursive: true });

function list(dir:string) {
  try {
    const items = readdirSync(dir).map(f => {
      const p = join(dir, f);
      const s = statSync(p);
      return s.isDirectory() ? `${p}/` : p;
    });
    return items.join('\n');
  } catch { return '(dir not found)'; }
}

const roots = ['src/mcp', 'src/tools', 'mcp', 'tools'];
const lines = roots.map(r => `## ${r}\n${list(r)}\n`).join('\n');

const report = `# MCP Inventory\nGenerated: ${new Date().toISOString()}\n\n${lines}`;
writeFileSync(`docs/mcp-inventory-${now}.md`, report);
console.log(report);

Run:

node scripts/forensics/mcp-inventory.ts


⸻

6) ELEVENLABS AGENT PRESENCE TEST

Find the agent code, config, and any server routes that power it; if missing, identify the exact commits that removed them and generate the restore commands without applying them.

// scripts/forensics/elevenlabs-where.ts
import { execSync } from 'child_process';
import { writeFileSync, mkdirSync } from 'fs';
function sh(cmd:string){ try { return execSync(cmd,{stdio:'pipe'}).toString(); } catch { return ''; } }
const now = new Date().toISOString().replace(/[:.]/g,'-');
mkdirSync('docs',{recursive:true});

const hits = sh(`grep -RIn --exclude-dir=node_modules -E "elevenlabs|ELEVENLABS|textToSpeech|voice" src || true`);
let restoreHints = '';
if (!hits.trim()) {
  // Find last commit touching potential elevenlabs paths
  const hist = sh(`git log -G "elevenlabs|ELEVENLABS|textToSpeech|voice" --pretty=format:"%h %ad %an %s" --date=iso || true`);
  restoreHints = hist ? `Potential restore points:\n${hist}` : '(no history found)';
}
const report = `# ElevenLabs Presence\nGenerated: ${new Date().toISOString()}\n\n## Code Hits\n${hits || '(none)'}\n\n## Restore Hints\n${restoreHints || '(none)'}\n`;
writeFileSync(`docs/elevenlabs-presence-${now}.md`, report);
console.log(report);

Run:

node scripts/forensics/elevenlabs-where.ts

If missing, also print suggested git commands:
	•	Restore specific files (example):

git checkout <GOOD_COMMIT_HASH> -- path/to/elevenlabs-agent.ts


	•	Or revert a breaking commit:

git revert <BAD_COMMIT_HASH> -m 1



Do not auto-run these—only print them in the report.

⸻

7) ROUTE MAP & 404 SENTRY

Generate a current route map (HTTP + WS) and flag handlers that used to exist (per git history) but now 404.

// scripts/forensics/route-map.ts
// Heuristic: scan src for app.get/post/... and ws paths; compare to git log of removed routes.

(Minimal implementation is fine: list current routes; grep git history for removed ones; print diff.)

⸻

8) OUTPUT DELIVERABLES
	•	docs/change-audit-*.md — full commit/diff/deletion summary
	•	docs/integrations-audit-*.md — all ElevenLabs/MCP/AI/Webhook/WS references
	•	docs/broken-imports-*.log — unresolved import/type errors
	•	docs/env-audit-*.md — env var usage
	•	docs/mcp-inventory-*.md — tools & server entry inventory
	•	docs/elevenlabs-presence-*.md — ElevenLabs status + restore hints
	•	docs/route-map-*.md — current routes & suspected missing ones

Print all of them to the console as well. Do not modify application runtime code beyond adding these read-only scripts.

⸻

9) TARGETED RESTORE PLAN (GENERATE ONLY)

If the audits confirm removal of ElevenLabs and/or MCP pieces:
	1.	Generate a file-scoped restore plan:
	•	For each missing file, print:
git checkout <GOOD_COMMIT> -- <path>
	2.	If a commit removed/mangled multiple related files, print:
git revert <BAD_COMMIT_HASH> -m 1
	3.	If routes were renamed, print a small patch restoring the old exports without touching unrelated code.
	4.	Do not apply—only output commands + a minimal patch file under docs/restore-patches/.

⸻

10) ABSOLUTE SAFETY RULES
	•	No deletes, no refactors, no renames.
	•	No package upgrades/downgrades.
	•	No env key changes.
	•	If any script would write outside /docs or scripts/forensics, abort.

Begin now. Produce all /docs/* reports and print them in the console.

⸻

What you (the builder) should say on completion
	•	A one-screen summary:
	•	list of deleted/changed files affecting ElevenLabs/MCP
	•	the exact commits that did it
	•	the git commands to restore (file-scoped or commit-revert)
	•	confirmation that nothing was modified (SAFE_MODE)

⸻

When you paste this, the builder will:
	•	Stop making “fixes,” and just report.
	•	Hand you exact restore commands for the ElevenLabs agent + MCP registry/server that were removed or altered.
	•	Give you a clear diff of what it actually changed during the last pass.

⸻

After you get the reports (what you’ll do next)
	1.	Share back the docs/change-audit-*.md and docs/elevenlabs-presence-*.md summaries (or just the restore commands it prints).
	2.	Run the specific file restores (not a full revert) to bring back the ElevenLabs agent and any MCP files that were wrongly removed.
	3.	Re-deploy, then we re-enable the safe guards (singleton, locks) around those restored pieces.

If you want, once you paste this and the builder prints the reports, I’ll read the outputs you get and give you the exact, minimal restore commands to run—no guessing, no collateral damage.