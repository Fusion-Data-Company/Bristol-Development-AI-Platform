import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { 
  Download,
  FileSpreadsheet,
  FileText,
  Database,
  Share2,
  Mail,
  Copy,
  CheckCircle
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CompRecord {
  id: string;
  source: string;
  name: string;
  address: string;
  city?: string;
  state?: string;
  assetType: string;
  units?: number;
  yearBuilt?: number;
  rentPsf?: number;
  rentPu?: number;
  occupancyPct?: number;
  amenityTags?: string[];
}

interface ExportCompsToolsProps {
  data: CompRecord[];
  selectedCount?: number;
}

export function ExportCompsTools({ data, selectedCount = 0 }: ExportCompsToolsProps) {
  const { toast } = useToast();
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState<string>('');

  const handleExport = async (format: 'csv' | 'excel' | 'json' | 'pdf') => {
    setIsExporting(true);
    setExportFormat(format);

    try {
      // Prepare export data
      const exportData = data.map(record => ({
        'Property Name': record.name,
        'Address': record.address,
        'City': record.city,
        'State': record.state,
        'Asset Type': record.assetType,
        'Units': record.units,
        'Year Built': record.yearBuilt,
        'Rent/SF': record.rentPsf,
        'Rent/Unit': record.rentPu,
        'Occupancy %': record.occupancyPct,
        'Source': record.source,
        'Amenities': record.amenityTags?.join(', ') || ''
      }));

      if (format === 'csv') {
        const csvContent = convertToCSV(exportData);
        downloadFile(csvContent, 'brand-comparables.csv', 'text/csv');
      } else if (format === 'json') {
        const jsonContent = JSON.stringify(exportData, null, 2);
        downloadFile(jsonContent, 'brand-comparables.json', 'application/json');
      } else if (format === 'excel') {
        // For Excel export, we'll use a simple approach
        const csvContent = convertToCSV(exportData);
        downloadFile(csvContent, 'brand-comparables.xls', 'application/vnd.ms-excel');
      } else if (format === 'pdf') {
        // For PDF, we'll generate a simple text-based report
        const pdfContent = generatePDFContent(exportData);
        downloadFile(pdfContent, 'brand-comparables-report.txt', 'text/plain');
      }

      toast({
        title: "Export Successful",
        description: `Downloaded ${data.length} comparables as ${format.toUpperCase()}`,
      });

    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Unable to export data. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
      setExportFormat('');
    }
  };

  const convertToCSV = (data: any[]) => {
    if (!data.length) return '';
    
    const headers = Object.keys(data[0]);
    const csvRows = [
      headers.join(','),
      ...data.map(row => 
        headers.map(header => {
          const value = row[header];
          // Escape quotes and wrap in quotes if contains comma
          const escaped = String(value || '').replace(/"/g, '""');
          return escaped.includes(',') ? `"${escaped}"` : escaped;
        }).join(',')
      )
    ];
    
    return csvRows.join('\n');
  };

  const generatePDFContent = (data: any[]) => {
    return `COMPANY DEVELOPMENT GROUP
COMPARABLES ANALYSIS REPORT
Generated: ${new Date().toLocaleDateString()}

Total Properties: ${data.length}

PROPERTY SUMMARY:
${data.map((item, index) => `
${index + 1}. ${item['Property Name']}
   Address: ${item.Address}, ${item.City}, ${item.State}
   Asset Type: ${item['Asset Type']}
   Units: ${item.Units}
   Year Built: ${item['Year Built']}
   Rent/SF: $${item['Rent/SF']}
   Rent/Unit: $${item['Rent/Unit']}
   Occupancy: ${item['Occupancy %']}%
   Source: ${item.Source}
   Amenities: ${item.Amenities}
`).join('\n')}

This report was generated by Company Site Intelligence Platform.
For questions, contact your Company development team.`;
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleCopyToClipboard = async () => {
    const exportData = data.map(record => 
      `${record.name} | ${record.address} | ${record.city}, ${record.state} | ${record.assetType} | ${record.units} units | $${record.rentPsf}/sf`
    ).join('\n');

    try {
      await navigator.clipboard.writeText(exportData);
      toast({
        title: "Copied to Clipboard",
        description: `${data.length} comparables copied as text`,
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex items-center gap-2">
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" size="sm" disabled={!data.length}>
            <Download className="h-4 w-4 mr-2" />
            Export ({data.length})
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-48">
          <DropdownMenuLabel>Export Format</DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={() => handleExport('csv')}>
            <FileSpreadsheet className="h-4 w-4 mr-2" />
            CSV Spreadsheet
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => handleExport('excel')}>
            <FileSpreadsheet className="h-4 w-4 mr-2" />
            Excel File
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => handleExport('json')}>
            <Database className="h-4 w-4 mr-2" />
            JSON Data
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => handleExport('pdf')}>
            <FileText className="h-4 w-4 mr-2" />
            PDF Report
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={handleCopyToClipboard}>
            <Copy className="h-4 w-4 mr-2" />
            Copy as Text
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <Button variant="outline" size="sm" disabled={!data.length}>
        <Share2 className="h-4 w-4 mr-2" />
        Share
      </Button>

      {isExporting && (
        <Badge variant="secondary" className="ml-2">
          Exporting {exportFormat.toUpperCase()}...
        </Badge>
      )}
    </div>
  );
}