import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { 
  Download,
  FileText,
  Table,
  FileSpreadsheet,
  Printer,
  Share2
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CompRecord {
  id: string;
  source: string;
  name: string;
  address: string;
  city?: string;
  state?: string;
  assetType: string;
  subtype?: string;
  units?: number;
  yearBuilt?: number;
  rentPsf?: number;
  rentPu?: number;
  occupancyPct?: number;
  concessionPct?: number;
  amenityTags?: string[];
  notes?: string;
}

interface ExportToolsProps {
  data: CompRecord[];
}

export function ExportTools({ data }: ExportToolsProps) {
  const { toast } = useToast();
  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);
  const [isExporting, setIsExporting] = useState(false);

  const exportToCSV = async () => {
    setIsExporting(true);
    try {
      const response = await fetch('/api/comps-annex/export.csv');
      if (!response.ok) throw new Error('Export failed');
      
      const csvData = await response.text();
      const blob = new Blob([csvData], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `bristol-comparables-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      window.URL.revokeObjectURL(url);
      toast({ title: 'Export successful', description: 'CSV file downloaded' });
    } catch (error) {
      toast({ title: 'Export failed', variant: 'destructive' });
    } finally {
      setIsExporting(false);
      setIsExportDialogOpen(false);
    }
  };

  const exportToJSON = () => {
    setIsExporting(true);
    try {
      const jsonData = JSON.stringify(data, null, 2);
      const blob = new Blob([jsonData], { type: 'application/json' });
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `bristol-comparables-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      window.URL.revokeObjectURL(url);
      toast({ title: 'Export successful', description: 'JSON file downloaded' });
    } catch (error) {
      toast({ title: 'Export failed', variant: 'destructive' });
    } finally {
      setIsExporting(false);
      setIsExportDialogOpen(false);
    }
  };

  const generateReport = () => {
    setIsExporting(true);
    try {
      // Generate a simple text report
      const totalUnits = data.reduce((sum, d) => sum + (d.units || 0), 0);
      const validRentData = data.filter(d => d.rentPsf && d.rentPsf > 0);
      const avgRent = validRentData.reduce((sum, d) => sum + (d.rentPsf || 0), 0) / validRentData.length;
      
      const report = `
BRISTOL DEVELOPMENT GROUP
Comparables Analysis Report
Generated: ${new Date().toLocaleDateString()}

SUMMARY
=======
Total Properties: ${data.length}
Total Units: ${totalUnits.toLocaleString()}
Average Rent/SF: $${avgRent.toFixed(2)}

PROPERTY DETAILS
===============
${data.slice(0, 10).map(d => `
${d.name}
${d.address}, ${d.city}, ${d.state}
Asset Type: ${d.assetType}${d.subtype ? ` (${d.subtype})` : ''}
Units: ${d.units || 'N/A'}
Year Built: ${d.yearBuilt || 'N/A'}
Rent/SF: ${d.rentPsf ? `$${d.rentPsf.toFixed(2)}` : 'N/A'}
Occupancy: ${d.occupancyPct ? `${d.occupancyPct}%` : 'N/A'}
${d.notes ? `Notes: ${d.notes}` : ''}
`).join('\n---\n')}

${data.length > 10 ? `\n... and ${data.length - 10} more properties` : ''}

This report was generated by the Bristol Site Intelligence Platform.
      `.trim();

      const blob = new Blob([report], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `bristol-comparables-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      window.URL.revokeObjectURL(url);
      toast({ title: 'Report generated', description: 'Text report downloaded' });
    } catch (error) {
      toast({ title: 'Report generation failed', variant: 'destructive' });
    } finally {
      setIsExporting(false);
      setIsExportDialogOpen(false);
    }
  };

  const printReport = () => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const totalUnits = data.reduce((sum, d) => sum + (d.units || 0), 0);
    const validRentData = data.filter(d => d.rentPsf && d.rentPsf > 0);
    const avgRent = validRentData.reduce((sum, d) => sum + (d.rentPsf || 0), 0) / validRentData.length;

    printWindow.document.write(`
      <html>
        <head>
          <title>Bristol Comparables Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .header { text-align: center; margin-bottom: 30px; }
            .summary { background: #f5f5f5; padding: 20px; margin-bottom: 30px; }
            .property { border: 1px solid #ddd; margin-bottom: 20px; padding: 15px; }
            .property-name { font-weight: bold; font-size: 16px; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f5f5f5; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Bristol Development Group</h1>
            <h2>Comparables Analysis Report</h2>
            <p>Generated: ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="summary">
            <h3>Summary</h3>
            <p><strong>Total Properties:</strong> ${data.length}</p>
            <p><strong>Total Units:</strong> ${totalUnits.toLocaleString()}</p>
            <p><strong>Average Rent/SF:</strong> $${avgRent.toFixed(2)}</p>
          </div>

          <table>
            <thead>
              <tr>
                <th>Property Name</th>
                <th>Address</th>
                <th>Asset Type</th>
                <th>Units</th>
                <th>Year Built</th>
                <th>Rent/SF</th>
                <th>Occupancy</th>
              </tr>
            </thead>
            <tbody>
              ${data.slice(0, 20).map(d => `
                <tr>
                  <td>${d.name}</td>
                  <td>${d.address}, ${d.city}, ${d.state}</td>
                  <td>${d.assetType}${d.subtype ? ` (${d.subtype})` : ''}</td>
                  <td>${d.units || 'N/A'}</td>
                  <td>${d.yearBuilt || 'N/A'}</td>
                  <td>${d.rentPsf ? `$${d.rentPsf.toFixed(2)}` : 'N/A'}</td>
                  <td>${d.occupancyPct ? `${d.occupancyPct}%` : 'N/A'}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
          
          ${data.length > 20 ? `<p><em>... and ${data.length - 20} more properties</em></p>` : ''}
        </body>
      </html>
    `);
    
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <Dialog open={isExportDialogOpen} onOpenChange={setIsExportDialogOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Export Data
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Export Comparables Data</DialogTitle>
          <DialogDescription>
            Choose how you'd like to export your comparable properties data
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <Button
              onClick={exportToCSV}
              disabled={isExporting}
              className="flex items-center justify-center gap-2 p-6 h-auto"
            >
              <FileSpreadsheet className="h-6 w-6" />
              <div className="text-left">
                <div className="font-medium">CSV Export</div>
                <div className="text-xs text-gray-500">Excel compatible</div>
              </div>
            </Button>

            <Button
              onClick={exportToJSON}
              disabled={isExporting}
              variant="outline"
              className="flex items-center justify-center gap-2 p-6 h-auto"
            >
              <FileText className="h-6 w-6" />
              <div className="text-left">
                <div className="font-medium">JSON Export</div>
                <div className="text-xs text-gray-500">Developer friendly</div>
              </div>
            </Button>

            <Button
              onClick={generateReport}
              disabled={isExporting}
              variant="outline"
              className="flex items-center justify-center gap-2 p-6 h-auto"
            >
              <Table className="h-6 w-6" />
              <div className="text-left">
                <div className="font-medium">Text Report</div>
                <div className="text-xs text-gray-500">Summary format</div>
              </div>
            </Button>

            <Button
              onClick={printReport}
              disabled={isExporting}
              variant="outline"
              className="flex items-center justify-center gap-2 p-6 h-auto"
            >
              <Printer className="h-6 w-6" />
              <div className="text-left">
                <div className="font-medium">Print Report</div>
                <div className="text-xs text-gray-500">Formatted layout</div>
              </div>
            </Button>
          </div>

          <div className="flex items-center justify-between text-sm text-gray-500">
            <span>{data.length} properties ready for export</span>
            <Badge variant="secondary">
              <Share2 className="h-3 w-3 mr-1" />
              Multiple formats
            </Badge>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

export default ExportTools;